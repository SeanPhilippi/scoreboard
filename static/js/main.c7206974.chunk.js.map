{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/AddPlayerForm.js","App.js","serviceWorker.js","index.js"],"names":["Stats","players","this","props","totalPoints","reduce","total","player","score","react_default","a","createElement","className","length","React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","_this","now","Date","setState","prevState","handleStopWatch","handleReset","_this2","intervalId","setInterval","clearInterval","seconds","Math","floor","onClick","Header","_this$props","title","components_Stats","components_Stopwatch","defaultProps","Counter","increment","idx","Icon","viewBox","isHighScore","d","transform","width","height","Player","remove","id","name","lastName","components_Icon","components_Counter","PureComponent","AddPlayerForm","playerInput","createRef","handleSubmit","e","preventDefault","addPlayer","current","value","currentTarget","reset","console","log","onSubmit","type","ref","placeholder","Scoreboard","last","prevPlayerId","getHighScore","scores","map","p","highScore","max","apply","Object","toConsumableArray","incrementScore","change","newState","handleAddPlayer","concat","handleRemovePlayer","filter","components_Header","components_Player","key","toString","components_AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7206974.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Stats extends React.Component {\n\n  render() {\n    const { players } = this.props;\n    const totalPoints = players.reduce((total, player) => {\n      return total + player.score;\n    }, 0)\n\n    return (\n      <table className=\"stats\">\n        <tbody>\n          <tr>Players: { players.length }</tr>\n          <tr>Total Points: { totalPoints }</tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n\nStats.propTypes = {\n  // checks that there is an array of objects with a score prop that is a number\n  players: PropTypes.arrayOf(PropTypes.shape({\n    score: PropTypes.number\n  }))\n}\n\nexport default Stats;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Stopwatch extends Component {\n\n   state = {\n      isRunning: false,\n      elapsedTime: 0, // accumulated amount of time that has passed by between ticks\n      previousTime: 0\n   }\n\n   static propTypes = {\n      onClick: PropTypes.func,\n      isRunning: PropTypes.bool,\n      elapsedTime: PropTypes.number,\n      previousTime: PropTypes.number\n   }\n\n   componentDidMount() {\n      this.intervalId = setInterval(() => this.tick(), 100);\n   }\n\n   componentWillUnmount() {\n      clearInterval(this.intervalId);\n   }\n\n   tick = () => {\n      if (this.state.isRunning) {\n         const now = Date.now();\n         this.setState(prevState => {\n            return {\n               previousTime: now,\n               elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n            }\n         })\n      }\n   }\n\n   handleStopWatch = () => {\n      this.setState(prevState => ({\n         isRunning: !prevState.isRunning\n      }))\n      if (!this.state.isRunning) {\n         this.setState({ previousTime: Date.now() });\n      }\n   }\n\n   handleReset = () => {\n      this.setState({\n         elapsedTime: 0\n      })\n   }\n\n   render() { \n      const seconds = Math.floor(this.state.elapsedTime / 1000);\n\n      return (\n         <div className=\"stopwatch\">\n            <h2>Stopwatch</h2>\n            <span className=\"stopwatch-time\">{ seconds }</span>\n            <button onClick={this.handleStopWatch}>\n               { this.state.isRunning ? 'Stop' : 'Start' }\n            </button>\n            <button onClick={this.handleReset}>Reset</button>\n         </div>\n      )\n   }\n}\n\nexport default Stopwatch;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Stats from './Stats';\nimport Stopwatch from './Stopwatch';\n\nclass Header extends React.Component {\n\n  render() {\n    // destructuring to avoid repeating of this.props\n    const { players, title } = this.props;\n    return (\n      <header>\n        <Stats players={ players }/>\n        <h1>{ title }</h1>\n        <Stopwatch/>\n      </header>\n    )\n  }\n}\n// props validation using PropTypes to make debugging easier\nHeader.propTypes = {\n  title: PropTypes.string,\n  // arrayOf method to make sure it is an array of objects\n  players: PropTypes.arrayOf(PropTypes.object)\n}\n\nHeader.defaultProps = {\n  title: 'Scoreboard'\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Counter extends React.Component {\n\n  render() {\n    const { increment, idx, score } = this.props;\n    return (\n      <div className=\"counter\">\n        <button \n          className=\"counter-decrement\" \n          onClick={ () => increment(-1, idx) }> - \n        </button>\n        <span className=\"counter-score\">{ score }</span>\n        <button \n          className=\"counter-increment\" \n          onClick={ () => increment(1, idx) }> + \n        </button>\n      </div>\n    )\n  }\n}\n\nCounter.propTypes = {\n  index: PropTypes.number,\n  score: PropTypes.number,\n  changeScore: PropTypes.func\n}\n\nexport default Counter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Icon = (props) => {\n   Icon.propTypes = {\n      isHighScore: PropTypes.bool\n   }\n\n   return (\n      <svg viewBox=\"0 0 44 35\" className={ props.isHighScore ? 'is-high-score' : null }>\n      <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" \n      transform=\"translate(0 0.301727)\"/>\n      <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\n   </svg>\n   )\n}\n\nexport default Icon;","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Counter from './Counter';\nimport Icon from './Icon';\n// PureComponent implements a lifecycle method called shouldComponentUpdate() in the background\n// checks to see if re-render is required for a component, will only call render if change\n// in state or props is detected\nclass Player extends PureComponent {\n  // \n  static propTypes = {\n    increment: PropTypes.func,\n    remove: PropTypes.func,\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    id: PropTypes.number,\n    idx: PropTypes.number,\n    isHighScore: PropTypes.bool\n  }\n\n  render() {\n    const { remove, id, name, lastName, increment, score, idx } = this.props;\n    return (\n      <div className=\"player\">\n        <span className=\"player-name\">\n          <button className=\"remove-player\" onClick={ () => remove(id) }>✖\n          </button>\n          <Icon isHighScore={this.props.isHighScore}/> {/*true or false*/}\n          { name } { lastName }\n        </span>\n        <Counter \n          increment={ increment } \n          score={ score }\n          idx={ idx }\n        />\n      </div>\n    )\n  }\n}\n\nexport default Player;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddPlayerForm extends React.Component {\n\n   static propTypes = {\n      type: PropTypes.string,\n      ref: PropTypes.func,\n      placeholder: PropTypes.string,\n      value: PropTypes.string\n   }\n   // ref used so render doesn't have to be called upon every keypress\n   // instead, called upon submit.  using state here was bulky vs using ref\n   playerInput = React.createRef();\n\n   handleSubmit = (e) => {\n      // prevent page reload which would reset state\n      e.preventDefault();\n      this.props.addPlayer(this.playerInput.current.value);\n      e.currentTarget.reset();\n   }\n\n   render() {\n      console.log(this.playerInput);\n      \n      return (\n         <form onSubmit={this.handleSubmit}>\n            <input \n               type=\"text\"\n               ref={this.playerInput}\n               placeholder=\"Enter a player's name\"\n            />\n\n            <input \n               type=\"submit\"\n               value=\"Add Player\"\n            />\n         </form>\n      )\n   }\n}\n\nexport default AddPlayerForm;","import React, { Component } from 'react';\nimport './index.css';\nimport Header from './components/Header';\nimport Player from './components/Player';\nimport AddPlayerForm from './components/AddPlayerForm';\n\nclass Scoreboard extends Component {\n  state = {\n    players: [\n      {\n        name: \"Sean\",\n        last: \"Philippi\",\n        score: 50, \n        id: 1\n      },\n      {\n        name: \"Mark\",\n        last: \"Faire\",\n        score: 35,\n        id: 2\n      },\n      {\n        name: \"Tracey\",\n        last: \"Miller\",\n        score: 28,\n        id: 3\n      },\n      {\n        name: \"Paul\",\n        last: \"Rankin\",\n        score: 15,\n        id: 4\n      },\n    ]\n  }\n\n  // player id counter\n  prevPlayerId = 4;\n\n  getHighScore = () => {\n    const scores = this.state.players.map( p => p.score );\n    const highScore = Math.max(...scores);\n    if (highScore) {\n      return highScore;\n    }\n    return null;\n  }\n\n  incrementScore = (change, idx) => {\n    const newState = this.state;\n    newState.players[idx].score += change;\n    this.setState(newState);\n  }\n\n  handleAddPlayer = (name) => {\n    this.setState(prevState => {\n      return {\n        players: [\n          ...prevState.players,\n          {\n            name,\n            score: 0,\n            id: this.prevPlayerId += 1\n          }\n        ]\n      }\n    })\n  }\n\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => ({\n      // pass in prevState to avoid mutating state, and set players to players that do not have an id matching id\n      players: prevState.players.filter( p => p.id !== id)\n    }))\n  }\n\n  render() {\n    const highScore = this.getHighScore();\n\n    return (\n      <div className=\"scoreboard\">\n        <Header players={this.state.players} />\n\n        {/* Players list */}\n        {this.state.players.map((player, idx) =>\n          <Player\n            name={player.name}\n            score={player.score}\n            key={player.id.toString()}\n            id={player.id}\n            lastName={player.last}\n            increment={this.incrementScore}\n            idx={idx}\n            remove={this.handleRemovePlayer}\n            // is a player's score prop equal to the highest score? \n            isHighScore={highScore === player.score} \n          />\n        )}\n\n        <AddPlayerForm addPlayer={this.handleAddPlayer}/>\n      </div>\n    );\n  }\n}\n\nexport default Scoreboard;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}